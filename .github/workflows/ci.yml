on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

name: CI

jobs:
  multi-arch:
    name: ${{ matrix.os }} check with ${{ matrix.xraylib_source}} xraylib source code
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        xraylib_source:
          - vendored
          - installed
        include:
          - xraylib_source: installed
            extra_flags: ""
          - xraylib_source: vendored
            extra_flags: "--features vendored"
        exclude:
          - os: windows-latest
            xraylib_source: installed
          
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install libxrl-dev on Linux
        if: matrix.xraylib_source == 'installed' && matrix.os == 'ubuntu-latest'
        run: |
          set -ex
          curl http://xmi-apt.tomschoonjans.eu/xmi.packages.key | sudo apt-key add -
          sudo add-apt-repository --yes "deb [arch=amd64] http://xmi-apt.tomschoonjans.eu/ubuntu focal stable"
          sudo apt-get --yes --force-yes update
          sudo apt-get --yes --force-yes install libxrl11-dev
          set +ex

      - run: pip install meson ninja

      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Activate msvc dev environment
        uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os == 'windows-latest'

      - uses: dtolnay/rust-toolchain@stable
        name: Install stable toolchain
        with:
          components: rustfmt, clippy

      - name: Run cargo check
        run: cargo check ${{ matrix.extra_flags }}
      
      - name: Run cargo test
        run: cargo test ${{ matrix.extra_flags }}

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run cargo clippy
        run: cargo clippy ${{ matrix.extra_flags }} -- -D warnings 

